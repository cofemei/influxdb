# Telegraf Configuration
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"
# Configuration for telegraf agent
[agent]
  interval = "10s"
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  # debug = false
  # quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = "prdlog.senao.com.tw"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  urls = ["http://10.66.100.233:8086"]

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false

# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]
  # skip_serial_number = false
  # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
  # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  # fielddrop = ["uptime_format"]

[[inputs.graylog]]
    servers = [
      "http://127.0.0.1:9000/api/system/metrics/multiple"
    ]
#   ## Metrics list
#   ## List of metrics can be found on Graylog webservice documentation.
#   ## Or by hitting the the web service api at:
#   ##   http://[graylog-host]:12900/system/metrics
    metrics = [
      "jvm.threads.count",
      "jvm.memory.total.init",
      "jvm.memory.total.used",
      "org.graylog2.journal.size",
      "org.graylog2.journal.size-limit",
      "org.graylog2.buffers.input.size",
      "org.graylog2.buffers.input.usage",
      "org.graylog2.buffers.output.size",
      "org.graylog2.buffers.output.usage",
      "org.graylog2.buffers.process.size",
      "org.graylog2.buffers.process.usage",
      "org.graylog2.journal.append.1-sec-rate",
      "org.graylog2.journal.utilization-ratio",
      "org.graylog2.throughput.input.1-sec-rate",
      "org.graylog2.throughput.output.1-sec-rate"
    ]
#   ## Username and password
    username = "angk9m69ckp3carfqk0bfipj0ijngfu3js75liauduu6h77eqtv"
    password = "token"
    insecure_skip_verify = true
    
# # Stream and parse log file(s).
[[inputs.logparser]]
  files = ["/var/log/nginx/access.log"]
  from_beginning = true
  name_override = "graylog_nginx"
  [inputs.logparser.grok]
    patterns = ["%{CUSTOM_LOG}"]
    custom_patterns = '''
      CUSTOM_LOG %{IPORHOST:remoteAddr} (?:-|(%{WORD}.%{WORD})) %{USER:ident} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:status} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{QS:forwarder} %{NUMBER:response_time:float}
    '''
      timezone = "Asia/Taipei"
